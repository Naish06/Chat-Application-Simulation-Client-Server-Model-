import socket
import threading
import time
#SERVER
clients = []

# Function to handle each connected client
def handle_client(conn, addr):
    print(f"[NEW CONNECTION] {addr}")
    while True:
        try:
            msg = conn.recv(1024).decode()
            if not msg:
                break
            print(f"[SERVER RECEIVED] {addr}: {msg}")

            # Broadcast message to all other clients
            for client in clients:
                if client != conn:
                    client.send(f"{addr}: {msg}".encode())
        except:
            break
    conn.close()
    clients.remove(conn)
    print(f"[DISCONNECTED] {addr}")

# Function to start the server
def start_server():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(("127.0.0.1", 5000))   # localhost, port 5000
    server.listen()
    print("[SERVER STARTED] Listening on port 5000...")

    # Accept clients in a loop
    while True:
        conn, addr = server.accept()
        clients.append(conn)
        thread = threading.Thread(target=handle_client, args=(conn, addr))
        thread.start()

#CLIENT
def client_program(name, messages):
    """
    Simulates a client that connects to the server,
    sends a list of messages, and prints responses.
    """
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client.connect(("127.0.0.1", 5000))   # connect to server

    # Function to receive messages
    def receive():
        while True:
            try:
                msg = client.recv(1024).decode()
                print(f"[{name} RECEIVED] {msg}")
            except:
                break

    # Start receiving thread
    threading.Thread(target=receive, daemon=True).start()

    # Send messages
    for msg in messages:
        time.sleep(1)  # simulate typing delay
        client.send(f"{name}: {msg}".encode())

    # Disconnect after sending messages
    time.sleep(2)
    client.close()
    print(f"[{name}] Disconnected.")


#SIMULATION
server_thread = threading.Thread(target=start_server, daemon=True)
server_thread.start()

# Wait for server to be ready
time.sleep(1)

# Start multiple simulated clients
client1 = threading.Thread(target=client_program, args=("Alice", ["Hi!", "How are you?", "Bye!"]))
client2 = threading.Thread(target=client_program, args=("Bob", ["Hello Alice!", "I am fine.", "See you."]))
client3 = threading.Thread(target=client_program, args=("Charlie", ["Hey guys!", "What's up?", "Goodbye."]))

client1.start()
client2.start()
client3.start()

# Wait for clients to finish
client1.join()
client2.join()
client3.join()

print("\n[CHAT SIMULATION COMPLETE]")
